# rtic
snippet rtic
	#![no_main]
	#![no_std]

	use panic_semihosting as _;
	use stm32f${0:device}xx_hal as hal;
	use hal::{prelude::*, rcc::RccExt};

	#[rtic::app(device = stm32f${0:device}xx_hal::pac, peripherals = true)]
	const APP: () = {
		struct Resources {}

		#[init]
		fn init(cx: init::Context) {	
			let dp: hal::pac::Peripherals = cx.device;
			let mut rcc = dp.RCC.constrain();
		}

		#[idle]
		fn idle(_cx: idle::Context) -> ! {
			loop {
				cortex_m::asm::nop();
			}
		}
	};

# tokio main
snippet tokio_main
	#[tokio::main]
	pub async fn main() {
		${0}
	}

# tokio spawn
snippet tokio_spawn
	tokio::spawn(async move {
		${0}
	});
